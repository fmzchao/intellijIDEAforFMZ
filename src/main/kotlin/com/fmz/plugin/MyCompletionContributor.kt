package com.fmz.plugin

import com.intellij.codeInsight.completion.*
import com.intellij.codeInsight.lookup.LookupElementBuilder
import com.intellij.patterns.PlatformPatterns
import com.intellij.psi.PsiFile
import com.intellij.util.ProcessingContext


object CompletionUtil {
    fun getCompletions(): List<String> {
        return listOf(
            // Exchange related functions
            "exchange.GetName",
            "exchange.GetLabel",
            "exchange.GetCurrency",
            "exchange.SetCurrency",
            "exchange.GetUSDCNY",
            "exchange.GetRate",
            "exchange.SetRate",
            "exchange.GetPeriod",
            "exchange.SetProxy",
            "exchange.SetTimeout",
            "exchange.SetBase",
            "exchange.GetBase",
            "exchange.GetAssets",
            "exchange.GetMarkets",
            "exchange.GetQuoteCurrency",
            "exchange.SetPrecision",
            "exchange.GetTicker",
            "exchange.GetDepth",
            "exchange.GetTrades",
            "exchange.GetRecords",
            "exchange.SetMaxBarLen",
            "exchange.GetAccount",
            "exchange.Buy",
            "exchange.Sell",
            "exchange.CancelOrder",
            "exchange.GetOrder",
            "exchange.GetOrders",
            "exchange.Go",
            "exchange.IO",
            "exchange.GetRawJSON",
            // Futures related functions
            "exchange.SetContractType",
            "exchange.GetContractType",
            "exchange.SetMarginLevel",
            "exchange.SetDirection",
            "exchange.GetPosition",
            // TA related functions
            "TA.MA",
            "TA.SMA",
            "TA.EMA",
            "TA.MACD",
            "TA.BOLL",
            "TA.KDJ",
            "TA.RSI",
            "TA.OBV",
            "TA.ATR",
            "TA.Alligator",
            "TA.CMF",
            "TA.Highest",
            "TA.Lowest",
            "talib.AD",
            "talib.ADOSC",
            "talib.ADX",
            "talib.ADXR",
            "talib.APO",
            "talib.AROON",
            "talib.AROONOSC",
            "talib.ASIN",
            "talib.ATAN",
            "talib.ATR",
            "talib.AVGPRICE",
            "talib.BBANDS",
            "talib.BETA",
            "talib.BOP",
            "talib.CCI",
            "talib.CDL2CROWS",
            "talib.CDL3BLACKCROWS",
            "talib.CDL3INSIDE",
            "talib.CDL3LINESTRIKE",
            "talib.CDL3OUTSIDE",
            "talib.CDL3STARSINSOUTH",
            "talib.CDL3WHITESOLDIERS",
            "talib.CDLABANDONEDBABY",
            "talib.CDLADVANCEBLOCK",
            "talib.CDLBELTHOLD",
            "talib.CDLBREAKAWAY",
            "talib.CDLCLOSINGMARUBOZU",
            "talib.CDLCONCEALBABYSWALL",
            "talib.CDLCOUNTERATTACK",
            "talib.CDLDARKCLOUDCOVER",
            "talib.CDLDOJI",
            "talib.CDLDOJISTAR",
            "talib.CDLDRAGONFLYDOJI",
            "talib.CDLENGULFING",
            "talib.CDLEVENINGDOJISTAR",
            "talib.CDLEVENINGSTAR",
            "talib.CDLGAPSIDESIDEWHITE",
            "talib.CDLGRAVESTONEDOJI",
            "talib.CDLHAMMER",
            "talib.CDLHANGINGMAN",
            "talib.CDLHARAMI",
            "talib.CDLHARAMICROSS",
            "talib.CDLHIGHWAVE",
            "talib.CDLHIKKAKE",
            "talib.CDLHIKKAKEMOD",
            "talib.CDLHOMINGPIGEON",
            "talib.CDLIDENTICAL3CROWS",
            "talib.CDLINNECK",
            "talib.CDLINVERTEDHAMMER",
            "talib.CDLKICKING",
            "talib.CDLKICKINGBYLENGTH",
            "talib.CDLLADDERBOTTOM",
            "talib.CDLLONGLEGGEDDOJI",
            "talib.CDLLONGLINE",
            "talib.CDLMARUBOZU",
            "talib.CDLMATCHINGLOW",
            "talib.CDLMATHOLD",
            "talib.CDLMORNINGDOJISTAR",
            "talib.CDLMORNINGSTAR",
            "talib.CDLONNECK",
            "talib.CDLPIERCING",
            "talib.CDLRICKSHAWMAN",
            "talib.CDLRISEFALL3METHODS",
            "talib.CDLSEPARATINGLINES",
            "talib.CDLSHOOTINGSTAR",
            "talib.CDLSHORTLINE",
            "talib.CDLSPINNINGTOP",
            "talib.CDLSTALLEDPATTERN",
            "talib.CDLSTICKSANDWICH",
            "talib.CDLTAKURI",
            "talib.CDLTASUKIGAP",
            "talib.CDLTHRUSTING",
            "talib.CDLTRISTAR",
            "talib.CDLUNIQUE3RIVER",
            "talib.CDLUPSIDEGAP2CROWS",
            "talib.CDLXSIDEGAP3METHODS",
            "talib.CEIL",
            "talib.CMO",
            "talib.CORREL",
            "talib.COS",
            "talib.COSH",
            "talib.DEMA",
            "talib.DIV",
            "talib.DX",
            "talib.EMA",
            "talib.EXP",
            "talib.FLOOR",
            "talib.HT_DCPERIOD",
            "talib.HT_DCPHASE",
            "talib.HT_PHASOR",
            "talib.HT_SINE",
            "talib.HT_TRENDLINE",
            "talib.HT_TRENDMODE",
            "talib.KAMA",
            "talib.LINEARREG",
            "talib.LINEARREG_ANGLE",
            "talib.LINEARREG_INTERCEPT",
            "talib.LINEARREG_SLOPE",
            "talib.LN",
            "talib.LOG10",
            "talib.MA",
            "talib.MACD",
            "talib.MACDEXT",
            "talib.MACDFIX",
            "talib.MAMA",
            "talib.MAX",
            "talib.MAXINDEX",
            "talib.MEDPRICE",
            "talib.MFI",
            "talib.MIDPOINT",
            "talib.MIDPRICE",
            "talib.MIN",
            "talib.MININDEX",
            "talib.MINMAX",
            "talib.MINMAXINDEX",
            "talib.MINUS_DI",
            "talib.MINUS_DM",
            "talib.MOM",
            "talib.MULT",
            "talib.NATR",
            "talib.OBV",
            "talib.PLUS_DI",
            "talib.PLUS_DM",
            "talib.PPO",
            "talib.ROC",
            "talib.ROCP",
            "talib.ROCR",
            "talib.ROCR100",
            "talib.RSI",
            "talib.SAR",
            "talib.SAREXT",
            "talib.SIN",
            "talib.SINH",
            "talib.SMA",
            "talib.SQRT",
            "talib.STDDEV",
            "talib.STOCH",
            "talib.STOCHF",
            "talib.STOCHRSI",
            "talib.SUB",
            "talib.SUM",
            "talib.T3",
            "talib.TAN",
            "talib.TANH",
            "talib.TEMA",
            "talib.TRANGE",
            "talib.TRIMA",
            "talib.TRIX",
            "talib.TSF",
            "talib.TYPPRICE",
            "talib.ULTOSC",
            "talib.VAR",
            "talib.WCLPRICE",
            "talib.WILLR",
            "talib.WMA",
            // Global functions
            "_C", "_D", "_G", "_N",
            "Chart", "Log", "Sleep",
            "LogProfit", "LogProfitReset", "LogStatus", "EnableLog", "LogReset", "LogVacuum",
            "Version", "IsVirtual", "Mail", "SetErrorFilter", "GetLastError",
            "GetCommand", "GetMeta", "GetPid", "Dial",
            "HttpQuery", "Encode", "UnixNano", "Unix", "GetOS",
            "SysInfo", "MD5", "DBExec", "UUID", "EventLoop",
            "JSONParse", "_Cross",
            "__Thread", "__threadPeekMessage", "__threadPostMessage",
            "__threadJoin", "__threadTerminate", "__threadGetData",
            "__threadSetData", "__threadId", "__threadPending",
            // Global constants
            "ORDER_TYPE_BUY",
            "ORDER_TYPE_SELL",
            "ORDER_STATE_PENDING",
            "ORDER_STATE_CLOSED",
            "ORDER_STATE_CANCELED",
            "ORDER_STATE_UNKNOWN",
            "ORDER_OFFSET_OPEN",
            "ORDER_OFFSET_CLOSE",
            "PD_LONG",
            "PD_SHORT",
            "PD_LONG_YD",
            "PD_SHORT_YD",
            "LOG_TYPE_BUY",
            "LOG_TYPE_SELL",
            "LOG_TYPE_CANCEL",
            "PERIOD_M1",
            "PERIOD_M3",
            "PERIOD_M5",
            "PERIOD_M15",
            "PERIOD_M30",
            "PERIOD_H1",
            "PERIOD_H2",
            "PERIOD_H4",
            "PERIOD_H6",
            "PERIOD_H12",
            "PERIOD_D1",
            "PERIOD_D3",
            "PERIOD_W1",
            //web3
            "BigDecimal",
            "BigFloat",
        )
    }
}
class MyCompletionContributor : CompletionContributor() {
    init {
        extend(
            CompletionType.BASIC,
            PlatformPatterns.psiElement(),
            object : CompletionProvider<CompletionParameters>() {
                override fun addCompletions(
                    parameters: CompletionParameters,
                    context: ProcessingContext,
                    resultSet: CompletionResultSet
                ) {
                    val file = parameters.originalFile
                    if (shouldProvideCompletion(file)) {
                        val completions = CompletionUtil.getCompletions()
                        completions.forEach { completion ->
                            resultSet.addElement(LookupElementBuilder.create(completion))
                        }
                    }
                }
            }
        )
    }

    private fun shouldProvideCompletion(file: PsiFile): Boolean {
        val fileName = file.name
        return fileName.endsWith(".js") || fileName.endsWith(".py")
    }

}
